#!/usr/bin/kermit

define ptx_init {

	take \%1

	# ':' distinguishes between serial line and telnet port
	if not match \m(PTXCONF_BOARDSETUP_SERIALPORT) *:* {
		set line \m(PTXCONF_BOARDSETUP_SERIALPORT)
		set speed \m(PTXCONF_BOARDSETUP_SERIALBAUDRATE)
		set parity none
		set stop-bits 1
	} else {
		set host \m(PTXCONF_BOARDSETUP_SERIALPORT)
		set terminal echo remote
	}
	set carrier-watch off
	set handshake none
	set flow-control none
	robust

	set input cancellation off
	set input case observe
	set input buffer-length 16384

	writeln ERROR "Communicating via \m(PTXCONF_BOARDSETUP_SERIALPORT) at \m(PTXCONF_BOARDSETUP_SERIALBAUDRATE) bps."
	writeln ERROR
	writeln ERROR "==============================="
	writeln ERROR "Please power on your board now!"
	writeln ERROR "==============================="
	writeln ERROR
}

define ptx_exit {

	writeln ERROR "All OK!"
	exit 0
}

define ptx_test_start {

	# do padding with '.'
	write ERROR "\frpad(\%1,40,.)"
}

define ptx_test_end {

	writeln ERROR "OK"
}

define ptx_wait_string {

	input \%1 \%2
	if failure {
		writeln ERROR "FAILED! (waiting for '\%2')"
		exit 1
	}
}

define ptx_uboot_enter_shell {

	ptx_test_start "Logging into U-Boot"

	minput 120 "U-Boot 1" "U-Boot 2"
:eval_again
	if failure {
		writeln ERROR "FAILED! (waiting for u-boot-signature)"
		exit 1
	}
	lineout
	.uboot_version := \v(minput)
	if = \m(uboot_version) 2 {
		.uboot_prompt = "uboot:"
	} else {
		.uboot_prompt = "uboot> "
	}
	# sometimes there are caches for serial inputs containing old data
	# make sure we act on the newest one
	minput 120 "U-Boot 1" "U-Boot 2" \m(uboot_prompt)
	if not = \v(minput) 3 goto eval_again
	ptx_test_end
}

define ptx_uboot_exec {

	lineout "\%2"
	input \%1 \m(uboot_prompt)
	if failure {
		writeln ERROR "FAILED! (timeout while waiting for u-boot prompt after '\%2')"
		exit 1
	}

	if = \m(uboot_version) 2 {
		lineout "echo result: $?"
		input 10 \fpattern(result: 0$)

		if failure {
			writeln ERROR "FAILED! (returncode from '\%2' is not 0)"
			exit 1
		}

		input 10 \m(uboot_prompt)
	}
}

define ptx_uboot_exec_single {

	ptx_test_start "\%1"
	ptx_uboot_exec "\%2" "\%3"
	ptx_test_end
}

define ptx_wait_string_single {

	ptx_test_start "\%1"
	ptx_wait_string "\%2" "\%3"
	ptx_test_end
}
