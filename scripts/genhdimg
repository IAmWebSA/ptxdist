#!/bin/bash

# Create a bootable harddisk (or compact flash) image from
# a partition definition given from command line
#
# (C) 2006, 2011 Pengutronix
#


Usage() {
cat <<-EOF

Usage: `basename "$0"` OPTIONS <svn rep>

    -h              this help
    -o <hdimg file> resulting hd image
    -i <img file>   filesystem image
    -p <def>        partition definition (can be given multiple times)

    A partition definition has the form
    start_sector:end_sector:partition_type:[imagefile]
EOF
}

# usage: pad from to blocks
#        cat $from to $to and pad the output to $blocks * 512 bytes
pad() {
	from="$1"
	to="$2"
	blocks="$3"

	if [ ! -e "$from" ]; then
		echo "$from does not exist"
		exit 1
	fi

	fromsize=$(stat -c "%s" "$from")

	if [ $(($fromsize)) -gt $(($blocks * 512)) ]; then
		echo "warning: $from truncated. Need $fromsize bytes, but have only $(($blocks * 512))!"
	fi

	tosize=$(stat -c "%s" "$to")
	toblocks_before=$(( $tosize / 512 ))

	dd if="$from" bs=512 count=$blocks conv=sync >> "$to" 2> /dev/null

	tosize=$(stat -c "%s" "$to")
	toblocks=$(( $tosize / 512 ))

	blocksleft=$(( $blocks - $toblocks + $toblocks_before ))

	if [ $blocksleft -gt 0 ]; then
		dd if=/dev/zero bs=512 count=$blocksleft >> "$to" 2>/dev/null
	fi
}


partcount=0

while getopts "hm:n:o:p:" OPT
do
	case "$OPT" in
	h)	Usage
		exit 1
		;;
	o) IMAGEFILE="$OPTARG"
	    ;;
	p)  partcount=$(($partcount + 1))
	    PART[$partcount]="$OPTARG"
	    ;;
	esac
done

if [ "$partcount" == 0 ]; then
	echo "need at least one partition definition"
	exit 1
fi

if [ "$partcount" -gt 4 ]; then
	echo "a maximum of four partitions is allowed"
	exit 1
fi

if [ -z "$IMAGEFILE" ]; then
	echo "no output image file given"
	exit 1
fi

IMAGETMP1=$(mktemp -p ${PTXDIST_TEMPDIR})
IMAGETMP2=$(mktemp -p ${PTXDIST_TEMPDIR})
IMAGETMP3=$(mktemp -p ${PTXDIST_TEMPDIR})
IMAGETMP4=$(mktemp -p ${PTXDIST_TEMPDIR})

echo "------------------------"
echo "Creating hard disk's MBR"
echo "------------------------"

# create the first 512 byte sector (MBR)

# fill it up to offset 446
dd if=/dev/zero bs=446 count=1 > $IMAGEFILE 2>/dev/null

# append the partitions

# mark the first partition bootable
extraarg="-c"

echo "------------------------------------"
echo "Creating hard disk's partition table"
echo "------------------------------------"

for i in $(seq 4); do
	pstart=$(( $(echo ${PART[$i]} | awk -F: '{print $1}') ))
	pend=$(( $(echo ${PART[$i]} | awk -F: '{print $2}') ))
	ptype=$(( $(echo ${PART[$i]} | awk -F: '{print $3}') ))
	pimage=$(echo ${PART[$i]} | awk -F: '{print $4}')
	psize=$(($pend - $pstart + 1))

	if [ $i -gt $partcount ]; then
		psize=0
	fi

	if [ ${psize} -ne 0 ]; then
		echo "Partition $i (start=$pstart, size=$psize type=$ptype)"
	fi

	# add 0x55aa magic to last partition in table
	if [ $i == 4 ]; then
		extraarg="-m"
	fi

	genpart $extraarg -b $pstart -s $psize -t $ptype >> $IMAGEFILE

	if [ -z "${pimage}" ]; then
		pimage=/dev/zero
	fi

	echo "    Initializing partition $i with '$(basename $pimage)'"
	eval TMPFILE=\$IMAGETMP${i}
	pad "$pimage" "${TMPFILE}" $psize

	extraarg=""
done

# add offset to first partition
offset=$(( $(echo ${PART[1]} | awk -F: '{print $1}') - 1))
if [ ${offset} -gt 1 ]; then
	echo
	echo "-------------------------------------------"
	echo "Creating hard disk's first partition offset"
	echo "-------------------------------------------"

	echo -n "padding ${offset} empty sectors..."
	dd if=/dev/zero bs=512 count=$offset >> $IMAGEFILE 2>/dev/null
	echo "done"
fi

echo
echo "----------------------------"
echo "Appending partitions content"
echo "----------------------------"

if [ -s ${IMAGETMP1} ]; then
	echo -n "adding content for partition 1..."
	cat ${IMAGETMP1} >> ${IMAGEFILE}
	echo "done"
fi
# FIXME padding sectors?
if [ -s ${IMAGETMP2} ]; then
	echo -n "adding content for partition 2..."
	cat ${IMAGETMP2} >> ${IMAGEFILE}
	echo "done"
fi
# FIXME padding sectors?
if [ -s ${IMAGETMP3} ]; then
	echo -n "adding content for partition 3..."
	cat ${IMAGETMP3} >> ${IMAGEFILE}
	echo "done"
fi
# FIXME padding sectors?
if [ -s ${IMAGETMP4} ]; then
	echo -n "adding content for partition 4..."
	cat ${IMAGETMP4} >> ${IMAGEFILE}
	echo "done"
fi
rm -f ${IMAGETMP1} ${IMAGETMP2} ${IMAGETMP3} ${IMAGETMP4}

