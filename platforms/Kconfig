#
# platforms/Kconfig: main menu structure for platform configuration
#

#
# FIXME
#
# MODULES wrt. tristate?
#

mainmenu "Platform"

comment "------------------------------------"
comment "Target Platform Configuration "
comment "------------------------------------"

config PLATFORM
	prompt "platform"
	string
	help
	  This string identifies the platform.

choice
	prompt "cpu architecture "
	help
	  Specify which processor architecture you want to compile for.

	config ARCH_ALPHA
		bool "alpha     "
		select HAS_MMU
		help
		  This is support for the Alpha processor architecture.

	config ARCH_ARM
		bool "arm       "
		select HAS_MMU
		help
		  This is support for the ARM processor architecture.

	config ARCH_BLACKFIN
		bool "blackfin  "
		help
		  This is support for the blackfin processor.

	config ARCH_X86
		bool "x86       "
		select HAS_MMU
		help
		  This is support for the Intel x86 architecture.

	config ARCH_PPC
		bool "ppc       "
		select HAS_MMU
		help
		  This is support for the PowerPC architecture.

	config ARCH_M68K
		bool "m68k      "
		select HAS_MMU
		help
		  This is support for the Motorola/Freescale M68k architecture.

	config ARCH_SPARC
		bool "sparc     "
		select HAS_MMU
		help
		  This is support for the SPARC architecture.

	config ARCH_MIPS
		bool "mips      "
		select HAS_MMU
		help
		  This is support for the MIPS architecture.

	config ARCH_CRIS
		bool "cris      "
		select HAS_MMU
		help
		  This is support for the cris architecture.

	config ARCH_PARISC
		bool "parisc    "
		select HAS_MMU
		help
		  This is support for the parisc architecture.

	config ARCH_SH
		bool "superh    "
		select HAS_MMU
		help
		  This is support for the SuperH architecture.
endchoice

choice
	prompt "arm SoC variant  "
	depends on ARCH_ARM
	help
	  The ARM processor architecture has a variety of flavours.
	  Please chose one.

	config ARCH_ARM_ATMEL
		bool "atmel     "

	config ARCH_ARM_AT91RM9200
		bool "at91rm9200"

	config ARM_ARM_EPXA
		bool "excalibur "

	config ARCH_ARM_IMX
		bool "i.mx      "

	config ARCH_ARM_IXP2000
		bool "ixp2000   "

	config ARCH_ARM_NETARM
		bool "net+arm   "

	config ARCH_ARM_NETX
		bool "netx      "

	config ARCH_ARM_OMAP
		bool "omap      "

	config ARCH_ARM_PXA
		bool "pxa       "

	config ARCH_ARM_SA1100
		bool "sa1100    "

endchoice

#
# architecture properties - generated without prompt
#

choice
	prompt "superh family    "
	depends on ARCH_SH

	config ARCH_SH_SH3
		bool "sh3       "

	config ARCH_SH_SH4
		bool "sh4       "
endchoice

choice
	prompt "x86 optimization "
	depends on ARCH_X86

	config ARCH_X86_I386
		bool "386       "
		help
		  The compiler will generate code for i386 CPUs as default. This code will
		  run on almost all x86_32 processors.

	config ARCH_X86_I486
		bool "486       "
		help
		  The compiler will generate code for i486 CPUs as default. This code will run
		  on almost all x86/ia32 processors, but not on i386!

	config ARCH_X86_I586
		bool "586       "
		help
		  The compiler will generate code for i586 class CPUs as default (Pentium).
		  This code will run on almost all x86/ia32 processors, but not on i386 and i486!

	config ARCH_X86_I686
		bool "686       "
		help
		  The compiler will generate code for i686 class CPUs as default (Pentium Pro).
		  This code will run on almost all x86/ia32 processors, but not on i386, i486 and pentium!

	config ARCH_X86_P2
		bool "PII       "
		help
		  The compiler will generate code for Pentium II CPUs as default.
		  This code will run on Pentium II and above CPUs.

  	config ARCH_X86_P3M
		bool "PIII/M    "
		help
		  The compiler will generate code for Pentium III and Pentium M CPUs as default.
		  This code will run on Pentium III and above CPUs. Note: A Pentium M is a successor
		  of Pentium III (Pentium 4 is a dead end)

endchoice


#
# endianess
#

choice
	prompt "endianess        "
	depends on ARCH_MIPS || ARCH_SH

	config MENU_ENDIAN_BIG
		bool "big       "

	config MENU_ENDIAN_LITTLE
		bool "little    "

endchoice

config ENDIAN_BIG
	bool
	default y if MENU_ENDIAN_BIG
	default y if ARCH_ARM_IXP2000
	default y if ARCH_PPC
	default y if ARCH_M68K
	default y if ARCH_SPARC
	default y if ARCH_PARISC


config ENDIAN_LITTLE
	bool
	default y if MENU_ENDIAN_LITTLE
	default y if ARCH_ARM_ATMEL
	default y if ARCH_ARM_AT91RM9200
	default y if ARCH_ARM_EPXA
	default y if ARCH_ARM_IMX
	default y if ARCH_ARM_NETARM
	default y if ARCH_ARM_NETX
	default y if ARCH_ARM_OMAP
	default y if ARCH_ARM_PXA
	default y if ARCH_ARM_SA1100
	default y if ARCH_ALPHA
	default y if ARCH_BLACKFIN
	default y if ARCH_X86
	default y if ARCH_CRIS


#
# memory management unit
#

config HAS_MMU
	bool

config ARCH_STRING
	string
	default "arm"			if ARCH_ARM
	default "armnommu"		if ARCH_ARM && !HAS_MMU
	default "alpha"			if ARCH_ALPHA
	default "blackfin"		if ARCH_BLACKFIN
	default "i386"			if ARCH_X86
	default "m68k"			if ARCH_M68K
	default "ppc"			if ARCH_PPC
	default "sparc"			if ARCH_SPARC
	default "mips"			if ARCH_MIPS
	default "mips"			if ARCH_MIPSEL
	default "cris"			if ARCH_CRIS
	default "parisc"		if ARCH_PARISC
	default "sh"			if ARCH_SH

config ARCH_USERSPACE_STRING
	string
	default "arm"			if ARCH_ARM && ENDIAN_LITTLE
	default "armeb"			if ARCH_ARM && ENDIAN_BIG
	default "alpha"			if ARCH_ALPHA
	default "blackfin"		if ARCH_BLACKFIN
	default "i386"			if ARCH_X86
	default "m68k"			if ARCH_M68K
	default "powerpc"		if ARCH_PPC
	default "sparc"			if ARCH_SPARC
	default "mips"			if ARCH_MIPS && ENDIAN_LITTLE
	default "mipsel"		if ARCH_MIPS && ENDIAN_BIG
	default "cris"			if ARCH_CRIS
	default "hppa"			if ARCH_PARISC
	default "sh"			if ARCH_SH

# ----------------------------------------------------------------------------

menu "extra toolchain options       "

config TARGET_EXTRA_CPPFLAGS
	string
	prompt "Extra CPPFLAGS (cpp)"
	help
	  Extra options for the C preprocessor.

config TARGET_EXTRA_CFLAGS
	string
	prompt "Extra CFLAGS (c)"
	help
	  Extra options for the C compiler.

config TARGET_EXTRA_CXXFLAGS
	string
	prompt "Extra CXXFLAGS (c++)"
	help
	  Extra options for the C++ compiler.

config TARGET_EXTRA_LDFLAGS
	string
	prompt "Extra LDFLAGS (ld)"
	help
	  Extra options for the linker.

endmenu


menu "paths & directories           "

config PREFIX
	prompt "prefix for \"install\" stage"
	string
	default "${PTXDIST_WORKSPACE}/local"
	help
	  This directory is being used to install things during the "install"
	  stage of PTXdist. It usually contains host tools and libraries which
	  are needed to link programs.

	  A sane default for this is ${PTXDIST_WORKSPACE}/local. Use this one
	  unless you do exactly know what you are doing.

	  PTXdist uses a sysroot/destdir mechanism, which means that packets
	  are being installed with

	  	make install DESTDIR=$(SYSROOT)

config HOST_PREFIX
	string
	default "${PTXCONF_PREFIX}-host"

config CROSS_PREFIX
	string
	default "${PTXCONF_PREFIX}-cross"

endmenu


menu "toolchain                     "

config CROSSCHAIN_VENDOR
	string
	prompt "check for specific toolchain vendor"
	default ""
	help
	  Add here an unique vendor string to ensure this project will
	  be build with the correct toolchain.
	  Leave this entry empty to omit this check.
	  To use this feature add a file called 'ptxconfig' to the bin/ folder of
	  your toolchain. This file should contain at least one variable definition:
	  PTXCONF_PROJECT="insert-vendor-string-here"
	  The string defined here will be checked against the string defined in
	  PTXCONF_PROJECT in file 'ptxconfig' from the toolchain.

config CROSSCHAIN_CHECK
	string
	prompt "check for specific gcc version"
	default "4.1.2"
	help
	  PTXdist calls your cross compiler with -dumpversion and
	  compares the output with this string. This should help
	  to avoid compilation with the wrong compiler version
	  when you use your own external toolchain.

config GNU_TARGET
	string
	prompt "gnu target"
	help
	  Defines the GNU target for your cross build.

config COMPILER_PREFIX
	string
	prompt "compiler prefix"
	default "${PTXCONF_GNU_TARGET}-"
	help
	 This is the prefix used to create the correct cross compiler name. If the
	 prefix is equal to the GNU Target you can use "${PTXCONF_GNU_TARGET}-" to
	 use it.

config COMPILER_PREFIX_KERNEL
	string
	prompt "compiler prefix (kernel)"
	default "${PTXCONF_COMPILER_PREFIX}"
	help
	 This is the prefix used to create the correct cross compiler
	 name used to compile the kernel. If the prefix equals the
	 normal compiler you can use "${PTXCONF_COMPILER_PREFIX}".

config COMPILER_PREFIX_UBOOT
	string
	prompt "compiler prefix (u-boot)"
	default "${PTXCONF_COMPILER_PREFIX}"
	help
	 This is the prefix used to create the correct cross compiler
	 name used to compile the u-boot. If the prefix equals the
	 normal compiler you can use "${PTXCONF_COMPILER_PREFIX}".

endmenu

source "platforms/kernel.in"
source "platforms/u-boot-v2.in"
