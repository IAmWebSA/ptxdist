menuconfig UDEV
	tristate
	prompt "udev                          "
	select ROOTFS_DEV
	help
	  udev provides a dynamic device directory containing only the files for
	  actually present devices. It creates or removes device node files in the
	  /dev directory, or it renames network interfaces.

	  Usually udev runs as udevd(8) and receives uevents directly from the
	  kernel if a device is added or removed from the system.

	  If udev receives a device event, it matches its configured rules against
	  the available device attributes provided in sysfs to identify the
	  device. Rules that match, may provide additional device information or
	  specify a device node name and multiple symlink names and instruct udev
	  to run additional programs as part of the device event handling.

	  Ensure: This udev implementation requires at least kernel 2.6.15 and
	  must have sysfs, unix domain sockets and networking enabled.

if UDEV

menu "build options                 "

	config UDEV_OPT_DEBUG
		bool
		prompt "enable debug messages"
		help
		  If enabled, very verbose debugging messages will be compiled
		  into the udev binaries. The actual level of debugging is specified
		  in the udev config file (refer entry "udev_log")

	config UDEV_OPT_GCOV
		bool
		# not supported yet
		# prompt "enable gcov support"

	config UDEV_OPT_SELINUX
		bool
		# not supported yet
		# prompt "enable selinux support"

	config UDEV_OPT_SYSLOG
		bool
		prompt "syslog support"
		help
		  If enabled, udev is able to pass errors or debug information
		  to syslog. This is very useful to see what udev is doing or not doing.
		  Note: To use this feature the syslog daemon must start before udev

endmenu

menu "extras                        "

	config UDEV_EXTRA_ATA_ID
		bool
		prompt "ata_id"
		help
		  FIXME

	config UDEV_EXTRA_CDROM_ID
		bool
		prompt "cdrom_id"
		help
		  FIXME

	config UDEV_EXTRA_COLLECT
		bool
		prompt "collect"
		help
		  FIXME

	config UDEV_EXTRA_EDD_ID
		bool
		prompt "edd_id"
		help
		  FIXME

	config UDEV_EXTRA_FIRMWARE
		bool
		prompt "firmware"
		help
		  FIXME

	config UDEV_EXTRA_FLOPPY
		bool
		prompt "floppy"
		help
		  FIXME

	config UDEV_EXTRA_FSTAB_IMPORT
		bool
		prompt "fstab_import"
		help
		  FIXME

	config UDEV_EXTRA_PATH_ID
		bool
		prompt "path_id"
		help
		  FIXME

	config UDEV_EXTRA_RULE_GENERATOR
		bool
		prompt "rule_generator"
		help
		  FIXME

	config UDEV_EXTRA_SCSI_ID
		bool
		prompt "scsi_id"
		help
		  FIXME

	config UDEV_EXTRA_USB_ID
		bool
		prompt "usb"
		help
		  FIXME

	config UDEV_EXTRA_VOLUME_ID
		bool
		prompt "volume_id"
		help
		  FIXME

endmenu

menu "install options               "

	config UDEV_INSTALL_UDEVD
		bool
		prompt "install udevd"
		help
		  udevd listens to kernel uevents and passes the incoming events to udev.
		  It ensures the right event order and takes care, that events for child
		  devices are delayed until the parent has finished the device handling.

	config UDEV_INSTALL_UDEVADM
		bool
		prompt "install udevadm"
		help
		  FIXME

	config UDEV_INSTALL_TEST_UDEV
		bool
		prompt "install test-udev"
		help
		  FIXME

	config UDEV_INSTALL_ETC_INITD_UDEV
		bool
		default y
		prompt "install /etc/init.d startup script"
		help
		  The /etc/init.d/udev script lets you control the udevd daemon.

		choice
			prompt "Kind of startup script"
			default UDEV_INSTALL_ETC_INITD_UDEV_DEFAULT
			depends on UDEV_INSTALL_ETC_INITD_UDEV

			config UDEV_INSTALL_ETC_INITD_UDEV_DEFAULT
				bool
				prompt "Use generic"
				select UDEV_INSTALL_UDEVD
				help
				  Installs a generic /etc/init.d/udev startup script.
				  See <ptxdist-install>/generic/etc/init.d/udev

			config UDEV_INSTALL_ETC_INITD_UDEV_USER
				bool
				prompt "User defined"
				help
				  This uses a user defined udev startup script. PTXdist
				  uses files projectroot/etc/init.d/udev in your local
				  project

		endchoice

	config UDEV_RC_D_LINK
		string
		prompt "link name in /etc/rc.d"
		default "S00_udev"
		help
		  Enter the name of the udev start link in /etc/init.d; this should
		  be something like "S00_udev". An empty string means that no link
		  is created.

endmenu

#config UDEV_START
#	bool "udevstart"
#	help
#	  Populates initial device directory. udevstart scans the kernel exported
#	  device information available in sysfs for devices which require a device
#	  node to operate and creates the node using the specified udev rules.
#	  udevstart is used to create the initial device directory after system
#	  bootup.
#
#config UDEV_TEST
#	bool "udevtest"
#	help
#	  udevtest simulates a udev run for the given device and prints out the
#	  name of the node udev would have created, or the name of the network
#	  interface, that would have been renamend.
#
#config UDEV_TRIGGER
#	bool "udevtrigger"
#	default y
#	help
#	   Trigger kernel device uevents to replay missing events at system
#	   coldplug. Its part of the udev mechanism to startup
#
#config UDEV_SETTLE
#	bool "udevsettle"
#	default y
#	help
#	  Waits watching the udev event queue and exits if all current events
#	  are handled. Its part of the udev mechanism to startup
#
#config UDEV_CONTROL
#	bool "udevcontrol"
#	help
#	  Lets you control the currently running udev system
#
#config UDEV_MONITOR
#	bool "udevmonitor"
#	help
#	  udevmonitor listens to the kernel uevents and events send out by a
#	  udev rule and prints the devpath of the event to the console. It can
#	  be used analyze to the event timing by comparing the timestamps of
#	  the kernel uevent with the udev event.
#
#config UDEV_FW_HELPER
#	bool "firmware helper"
#	help
#	  This is a small helper script to load some kind of firmware on demand
#
#config UDEV_USB_ID
#	bool "USB device id generator"
#	help
#	  This is a helper to generate unique information about some kind of
#	  USB device. This is required to ensure the same hotplugged device to
#	  appear always at the same device node (via link)
#
#menu "runtime options               "
#
#config ROOTFS_ETC_UDEV_CONF
#	bool
#	default y
#	prompt "Install udev.conf"
#	help
#	  Installs /etc/udev/udev.conf from a selectable source
#
#	choice
#		prompt "Kind of udev.conf"
#		default ROOTFS_ETC_UDEV_CONF_DEFAULT
#		depends on ROOTFS_ETC_UDEV_CONF
#
#		config ROOTFS_ETC_UDEV_CONF_DEFAULT
#			bool
#			prompt "Use generic"
#			help
#			  Installs a generic /etc/udev/udev.conf file.
#			  See <ptxdist-install>/generic/etc/udev/udev.conf
#
#		config ROOTFS_ETC_UDEV_CONF_USER
#			bool
#			prompt "User defined"
#			help
#			  This uses a user defined udev.conf file. PTXdist
#			  uses file projectroot/etc/udev/udev.conf in your
#			  local project.
#			  Note: If you locate the *.rules path to another
#			  location than /etc/udev/rules.d, you must install any
#			  udev rules by your own.
#
#	endchoice
#
#config ROOTFS_ETC_UDEV_DEFAULT_RULES
#	bool
#	prompt "Install default udev rules"
#	help
#	  This will install the generic udev rules file under
#	  /etc/udev/rules.d/udev.rules. Currently this file
#	  is very basic.
#
#config ROOTFS_ETC_UDEV_USER_RULES
#	bool
#	prompt "Install user defined rules"
#	help
#	  This will install all user defined udev *.rules files from the active
#	  project. PTXdist expects the files in projectroot/etc/udev/rules.d
#	  and will install them into /etc/udev/rules.d on the target.
#	  Note: PTXdist only comes with very basic generic udev rules. All devices
#	  are owned by root only. If you need special permission control you must
#	  add some udev rules to create device nodes with correct permissions.
#	  There are some rule files in the udev packet. Refer
#	  "build-target/udev-???/etc/udev/rules.d" to check if they meet your
#	  requirements.
#	  Pay attention: Do not use the same filenames for your self defined
#	  rules if you also selected the default rules! The default rule file
#	  will win this race!
#

endif

