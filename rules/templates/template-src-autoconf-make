# -*-makefile-*-
#
# Copyright (C) @YEAR@ by @AUTHOR@
#
# See CREDITS for details about who has contributed to this project.
#
# For further information about the PTXdist project and license conditions
# see the README file.
#

#
# We provide this package
#
PACKAGES-$(PTXCONF_@PACKAGE@) += @package@

#
# Paths and names
#
@PACKAGE@_VERSION	:= @VERSION@
@PACKAGE@		:= @package@-$(@PACKAGE@_VERSION)
@PACKAGE@_SRCDIR		:= $(PTXDIST_WORKSPACE)/local_src/$(@PACKAGE@)
@PACKAGE@_DIR		:= $(BUILDDIR)/$(@PACKAGE@)
@PACKAGE@_LICENSE	:= unknown

# ----------------------------------------------------------------------------
# Extract
# ----------------------------------------------------------------------------

$(STATEDIR)/@package@.extract:
	@$(call targetinfo)
	@$(call clean, $(@PACKAGE@_DIR))
ifdef PTXCONF_@PACKAGE@_TRUNK
	cd $(@PACKAGE@_SRCDIR) && sh autogen.sh
endif
	@$(call patchin, @PACKAGE@, $(@PACKAGE@_SRCDIR))
	mkdir -p $(@PACKAGE@_DIR)
	@$(call touch)

# ----------------------------------------------------------------------------
# Prepare
# ----------------------------------------------------------------------------

#@PACKAGE@_CONF_ENV	:= $(CROSS_ENV)

#
# autoconf
#
@PACKAGE@_CONF_TOOL	:= autoconf
@PACKAGE@_CONF_OPT	:= $(CROSS_AUTOCONF_USR)

$(STATEDIR)/@package@.prepare:
	@$(call targetinfo)
	@$(call clean, $(@PACKAGE@_DIR)/config.cache)
	cd $(@PACKAGE@_DIR) && \
		$(@PACKAGE@_PATH) $(@PACKAGE@_CONF_ENV) \
		$(@PACKAGE@_SRCDIR)/configure $(@PACKAGE@_CONF_OPT)
	@$(call touch)

# ----------------------------------------------------------------------------
# Compile
# ----------------------------------------------------------------------------

#$(STATEDIR)/@package@.compile:
#	@$(call targetinfo)
#	@$(call world/compile, @PACKAGE@)
#	@$(call touch)

# ----------------------------------------------------------------------------
# Install
# ----------------------------------------------------------------------------

#$(STATEDIR)/@package@.install:
#	@$(call targetinfo)
#	@$(call world/install, @PACKAGE@)
#	@$(call touch)

# ----------------------------------------------------------------------------
# Target-Install
# ----------------------------------------------------------------------------

$(STATEDIR)/@package@.targetinstall:
	@$(call targetinfo)

	@$(call install_init,  @package@)
	@$(call install_fixup, @package@, PACKAGE, @package@)
	@$(call install_fixup, @package@, PRIORITY, optional)
	@$(call install_fixup, @package@, VERSION, @VERSION@)
	@$(call install_fixup, @package@, SECTION, base)
	@$(call install_fixup, @package@, AUTHOR, "@AUTHOR@")
	@$(call install_fixup, @package@, DEPENDS,)
	@$(call install_fixup, @package@, DESCRIPTION, missing)

#	#
#	# example code:; copy all libraries, links and binaries
#	#

	@for i in $(shell cd $(PKGDIR)/$(@PACKAGE@) && find bin sbin usr/bin usr/sbin -type f); do \
		$(call install_copy, @package@, 0, 0, 0755, -, /$$i); \
	done
	@for i in $(shell cd $(PKGDIR)/$(@PACKAGE@) && find lib usr/lib -name "*.so*"); do \
		$(call install_copy, @package@, 0, 0, 0644, -, /$$i); \
	done
	@links="$(shell cd $(PKGDIR)/$(@PACKAGE@) && find lib usr/lib -type l)"; \
	if [ -n "$$links" ]; then \
		for i in $$links; do \
			from="`readlink $(PKGDIR)/$(@PACKAGE@)/$$i`"; \
			to="/$$i"; \
			$(call install_link, @package@, $$from, $$to); \
		done; \
	fi

#	#
#	# FIXME: add all necessary things here
#	#

	@$(call install_finish, @package@)

	@$(call touch)

# ----------------------------------------------------------------------------
# Clean
# ----------------------------------------------------------------------------

#$(STATEDIR)/@package@.clean:
#	@$(call targetinfo)
#	@$(call clean_pkg, @PACKAGE@)

# vim: syntax=make
