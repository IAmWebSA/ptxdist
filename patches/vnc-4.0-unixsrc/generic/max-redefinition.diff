# 
# Submitted:
#
# Robert Schwebel, 2004-11-1
# Benedikt Spranger, 2004-11-1
#
# Error: 
#
# stl_bvector.h:823: error: expected unqualified-id before '(' token
#
# Description: 
#
# http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16605
#
# State:
# 
# should be sent to the realvnc maintainers
#

diff -urN vnc-4.0-unixsrc/rfb/Rect.h vnc-4.0-unixsrc-rsc/rfb/Rect.h
--- vnc-4.0-unixsrc/rfb/Rect.h	2003-06-30 22:50:25.000000000 +0200
+++ vnc-4.0-unixsrc-rsc/rfb/Rect.h	2004-11-01 18:43:40.000000000 +0100
@@ -21,12 +21,13 @@
 #ifndef __RFB_RECT_INCLUDED__
 #define __RFB_RECT_INCLUDED__
 
-#ifndef max
-#define max(a,b)            (((a) > (b)) ? (a) : (b))
+// Don't use max here: this is wrongly expanded in std::max() calls!
+#ifndef maxval
+#define maxval(a,b)            (((a) > (b)) ? (a) : (b))
 #endif
 
-#ifndef min
-#define min(a,b)            (((a) < (b)) ? (a) : (b))
+#ifndef minval
+#define minval(a,b)            (((a) < (b)) ? (a) : (b))
 #endif
 
 namespace rfb {
@@ -70,20 +71,20 @@
     }
     inline Rect intersect(const Rect &r) const {
       Rect result;
-      result.tl.x = max(tl.x, r.tl.x);
-      result.tl.y = max(tl.y, r.tl.y);
-      result.br.x = max(min(br.x, r.br.x), result.tl.x);
-      result.br.y = max(min(br.y, r.br.y), result.tl.y);
+      result.tl.x = maxval(tl.x, r.tl.x);
+      result.tl.y = maxval(tl.y, r.tl.y);
+      result.br.x = maxval(minval(br.x, r.br.x), result.tl.x);
+      result.br.y = maxval(minval(br.y, r.br.y), result.tl.y);
       return result;
     }
     inline Rect union_boundary(const Rect &r) const {
       if (r.is_empty()) return *this;
       if (is_empty()) return r;
       Rect result;
-      result.tl.x = min(tl.x, r.tl.x);
-      result.tl.y = min(tl.y, r.tl.y);
-      result.br.x = max(br.x, r.br.x);
-      result.br.y = max(br.y, r.br.y);
+      result.tl.x = minval(tl.x, r.tl.x);
+      result.tl.y = minval(tl.y, r.tl.y);
+      result.br.x = maxval(br.x, r.br.x);
+      result.br.y = maxval(br.y, r.br.y);
       return result;
     }
     inline Rect translate(const Point &p) const {
diff -urN vnc-4.0-unixsrc-orig/rfb/ComparingUpdateTracker.cxx vnc-4.0-unixsrc/rfb/ComparingUpdateTracker.cxx
--- vnc-4.0-unixsrc-orig/rfb/ComparingUpdateTracker.cxx	2004-04-12 17:53:11.000000000 +0200
+++ vnc-4.0-unixsrc/rfb/ComparingUpdateTracker.cxx	2004-11-01 18:54:58.000000000 +0100
@@ -60,7 +60,7 @@
     // since in effect the entire framebuffer has changed.
     oldFb.setSize(fb->width(), fb->height());
     for (int y=0; y<fb->height(); y+=BLOCK_SIZE) {
-      Rect pos(0, y, fb->width(), min(fb->height(), y+BLOCK_SIZE));
+      Rect pos(0, y, fb->width(), minval(fb->height(), y+BLOCK_SIZE));
       int srcStride;
       const rdr::U8* srcData = fb->getPixelsR(pos, &srcStride);
       oldFb.imageRect(pos, srcData, srcStride);
@@ -100,20 +100,20 @@
   for (int blockTop = r.tl.y; blockTop < r.br.y; blockTop += BLOCK_SIZE)
   {
     // Get a strip of the source buffer
-    Rect pos(r.tl.x, blockTop, r.br.x, min(r.br.y, blockTop+BLOCK_SIZE));
+    Rect pos(r.tl.x, blockTop, r.br.x, minval(r.br.y, blockTop+BLOCK_SIZE));
     int fbStride;
     const rdr::U8* newBlockPtr = fb->getPixelsR(pos, &fbStride);
     int newStrideBytes = fbStride * bytesPerPixel;
 
     rdr::U8* oldBlockPtr = oldData;
-    int blockBottom = min(blockTop+BLOCK_SIZE, r.br.y);
+    int blockBottom = minval(blockTop+BLOCK_SIZE, r.br.y);
 
     for (int blockLeft = r.tl.x; blockLeft < r.br.x; blockLeft += BLOCK_SIZE)
     {
       const rdr::U8* newPtr = newBlockPtr;
       rdr::U8* oldPtr = oldBlockPtr;
 
-      int blockRight = min(blockLeft+BLOCK_SIZE, r.br.x);
+      int blockRight = minval(blockLeft+BLOCK_SIZE, r.br.x);
       int blockWidthInBytes = (blockRight-blockLeft) * bytesPerPixel;
 
       for (int y = blockTop; y < blockBottom; y++)
diff -urN vnc-4.0-unixsrc-orig/rfb/hextileDecode.h vnc-4.0-unixsrc/rfb/hextileDecode.h
--- vnc-4.0-unixsrc-orig/rfb/hextileDecode.h	2003-07-31 20:03:38.000000000 +0200
+++ vnc-4.0-unixsrc/rfb/hextileDecode.h	2004-11-01 18:55:27.000000000 +0100
@@ -52,11 +52,11 @@
 
   for (t.tl.y = r.tl.y; t.tl.y < r.br.y; t.tl.y += 16) {
 
-    t.br.y = min(r.br.y, t.tl.y + 16);
+    t.br.y = minval(r.br.y, t.tl.y + 16);
 
     for (t.tl.x = r.tl.x; t.tl.x < r.br.x; t.tl.x += 16) {
 
-      t.br.x = min(r.br.x, t.tl.x + 16);
+      t.br.x = minval(r.br.x, t.tl.x + 16);
 
       int tileType = is->readU8();
 
diff -urN vnc-4.0-unixsrc-orig/rfb/hextileEncode.h vnc-4.0-unixsrc/rfb/hextileEncode.h
--- vnc-4.0-unixsrc-orig/rfb/hextileEncode.h	2003-07-31 20:03:38.000000000 +0200
+++ vnc-4.0-unixsrc/rfb/hextileEncode.h	2004-11-01 18:55:46.000000000 +0100
@@ -60,11 +60,11 @@
 
   for (t.tl.y = r.tl.y; t.tl.y < r.br.y; t.tl.y += 16) {
 
-    t.br.y = min(r.br.y, t.tl.y + 16);
+    t.br.y = minval(r.br.y, t.tl.y + 16);
 
     for (t.tl.x = r.tl.x; t.tl.x < r.br.x; t.tl.x += 16) {
 
-      t.br.x = min(r.br.x, t.tl.x + 16);
+      t.br.x = minval(r.br.x, t.tl.x + 16);
 
       GET_IMAGE_INTO_BUF(t,buf);
 
diff -urN vnc-4.0-unixsrc-orig/rfb/zrleDecode.h vnc-4.0-unixsrc/rfb/zrleDecode.h
--- vnc-4.0-unixsrc-orig/rfb/zrleDecode.h	2003-07-31 20:03:38.000000000 +0200
+++ vnc-4.0-unixsrc/rfb/zrleDecode.h	2004-11-01 18:56:40.000000000 +0100
@@ -61,11 +61,11 @@
 
   for (t.tl.y = r.tl.y; t.tl.y < r.br.y; t.tl.y += 64) {
 
-    t.br.y = min(r.br.y, t.tl.y + 64);
+    t.br.y = minval(r.br.y, t.tl.y + 64);
 
     for (t.tl.x = r.tl.x; t.tl.x < r.br.x; t.tl.x += 64) {
 
-      t.br.x = min(r.br.x, t.tl.x + 64);
+      t.br.x = minval(r.br.x, t.tl.x + 64);
 
       int mode = zis->readU8();
       bool rle = mode & 128;
diff -urN vnc-4.0-unixsrc-orig/rfb/zrleEncode.h vnc-4.0-unixsrc/rfb/zrleEncode.h
--- vnc-4.0-unixsrc-orig/rfb/zrleEncode.h	2004-06-11 17:13:52.000000000 +0200
+++ vnc-4.0-unixsrc/rfb/zrleEncode.h	2004-11-01 18:56:13.000000000 +0100
@@ -130,7 +130,7 @@
 
   for (t.tl.y = r.tl.y; t.tl.y < r.br.y; t.tl.y += 64) {
 
-    t.br.y = min(r.br.y, t.tl.y + 64);
+    t.br.y = minval(r.br.y, t.tl.y + 64);
 
     if (os->length() + worstCaseLine > maxLen) {
       if (t.tl.y == r.tl.y)
@@ -143,7 +143,7 @@
 
     for (t.tl.x = r.tl.x; t.tl.x < r.br.x; t.tl.x += 64) {
 
-      t.br.x = min(r.br.x, t.tl.x + 64);
+      t.br.x = minval(r.br.x, t.tl.x + 64);
 
       GET_IMAGE_INTO_BUF(t,buf);
 
diff -urN vnc-4.0-unixsrc-orig/tx/TXImage.cxx vnc-4.0-unixsrc/tx/TXImage.cxx
--- vnc-4.0-unixsrc-orig/tx/TXImage.cxx	2004-03-18 18:25:19.000000000 +0100
+++ vnc-4.0-unixsrc/tx/TXImage.cxx	2004-11-01 18:57:28.000000000 +0100
@@ -71,8 +71,8 @@
   if (w == width() && h == height()) return;
 
   int oldStrideBytes = getStride() * (format.bpp/8);
-  int rowsToCopy = min(h, height());
-  int bytesPerRow = min(w, width()) * (format.bpp/8);
+  int rowsToCopy = minval(h, height());
+  int bytesPerRow = minval(w, width()) * (format.bpp/8);
   rdr::U8* oldData = 0;
   bool allocData = false;
 
