Subject: add cyclictest command line option for unbuffered output
From: Michael Olbrich <m.olbrich@pengutronix.de>

Wenn reading the output from cyclictest with another program, the data is
buffered by default. This prevents nice 'live' display.
This patch adds an command line option to force the output to always be
unbuffered.

Signed-off-by: Michael Olbrich <m.olbrich@pengutronix.de>

---
 src/cyclictest/cyclictest.c |    5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

Index: b/src/cyclictest/cyclictest.c
===================================================================
--- a/src/cyclictest/cyclictest.c
+++ b/src/cyclictest/cyclictest.c
@@ -797,6 +797,7 @@ static void display_help(int error)
 	       "                           without -t default = 1\n"
 	       "-T TRACE --tracer=TRACER   set tracing function\n"
 	       "    configured tracers: %s\n"
+	       "-u       --unbuffered      force unbuffered output for live processing\n"
 	       "-v       --verbose         output values on stdout for statistics\n"
 	       "                           format: n:c:v n=tasknum c=count v=value in us\n"
                "-w       --wakeup          task wakeup tracing (used with -b)\n"
@@ -914,6 +915,7 @@ static void process_options (int argc, c
 			{"relative", no_argument, NULL, 'r'},
 			{"system", no_argument, NULL, 's'},
 			{"threads", optional_argument, NULL, 't'},
+			{"unbuffered", no_argument, NULL, 'u'},
 			{"verbose", no_argument, NULL, 'v'},
 			{"duration",required_argument, NULL, 'D'},
                         {"wakeup", no_argument, NULL, 'w'},
@@ -923,7 +925,7 @@ static void process_options (int argc, c
 			{"traceopt", required_argument, NULL, 'O'},
 			{NULL, 0, NULL, 0}
 		};
-                int c = getopt_long (argc, argv, "a::b:Bc:Cd:Efh:i:Il:nNo:O:p:Pmqrst::vD:wWTy:",
+                int c = getopt_long (argc, argv, "a::b:Bc:Cd:Efh:i:Il:nNo:O:p:Pmqrst::vuD:wWTy:",
 			long_options, &option_index);
 		if (c == -1)
 			break;
@@ -972,6 +974,7 @@ static void process_options (int argc, c
 				num_threads = max_cpus;
 			break;
 		case 'T': strncpy(tracer, optarg, sizeof(tracer)); break;
+		case 'u': setvbuf(stdout, NULL, _IONBF, 0); break;
 		case 'v': verbose = 1; break;
 		case 'm': lockall = 1; break;
 		case 'D': duration = parse_time_string(optarg);
