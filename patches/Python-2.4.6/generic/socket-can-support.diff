Subject: Add support for socketcan to the python socket module
From: Michael Olbrich <m.olbrich@pengutronix.de>

This patch add support for the protocol family AF_CAN. It contains all the
necessary code to use the python socket module for socketcan.

Signed-off-by: Michael Olbrich <m.olbrich@pengutronix.de>
---
 Lib/plat-linux2/IN.py  |    2 +
 Modules/socketmodule.c |   90 +++++++++++++++++++++++++++++++++++++++++++++++++
 Modules/socketmodule.h |   11 +++++
 configure.in           |   13 +++++++
 4 files changed, 116 insertions(+)

Index: Python-2.4.6/Lib/plat-linux2/IN.py
===================================================================
--- Python-2.4.6.orig/Lib/plat-linux2/IN.py
+++ Python-2.4.6/Lib/plat-linux2/IN.py
@@ -384,6 +384,7 @@ PF_SNA = 22
 PF_IRDA = 23
 PF_PPPOX = 24
 PF_WANPIPE = 25
+PF_CAN = 29
 PF_BLUETOOTH = 31
 PF_MAX = 32
 AF_UNSPEC = PF_UNSPEC
@@ -414,6 +415,7 @@ AF_SNA = PF_SNA
 AF_IRDA = PF_IRDA
 AF_PPPOX = PF_PPPOX
 AF_WANPIPE = PF_WANPIPE
+AF_CAN = PF_CAN
 AF_BLUETOOTH = PF_BLUETOOTH
 AF_MAX = PF_MAX
 SOL_RAW = 255
Index: Python-2.4.6/Modules/socketmodule.h
===================================================================
--- Python-2.4.6.orig/Modules/socketmodule.h
+++ Python-2.4.6/Modules/socketmodule.h
@@ -39,6 +39,14 @@
 #include <bluetooth/sco.h>
 #endif
 
+#define AF_CAN 29
+#define PF_CAN AF_CAN
+
+#ifdef HAVE_LINUX_CAN_H
+#define ENABLE_CAN 1
+#include <linux/can.h>
+#endif
+
 #ifdef HAVE_BLUETOOTH_H
 #include <bluetooth.h>
 #endif
@@ -82,6 +90,9 @@ typedef union sock_addr {
 	struct sockaddr_in6 in6;
 	struct sockaddr_storage storage;
 #endif
+#ifdef ENABLE_CAN
+	struct sockaddr_can can;
+#endif
 #ifdef HAVE_BLUETOOTH_BLUETOOTH_H
 	struct sockaddr_l2 bt_l2;
 	struct sockaddr_rc bt_rc;
Index: Python-2.4.6/Modules/socketmodule.c
===================================================================
--- Python-2.4.6.orig/Modules/socketmodule.c
+++ Python-2.4.6/Modules/socketmodule.c
@@ -381,6 +381,10 @@ const char *inet_ntop(int af, const void
 #endif
 #endif
 
+#ifdef ENABLE_CAN
+#include <linux/can/raw.h>
+#endif
+
 /*
  * Constants for getnameinfo()
  */
@@ -1034,6 +1038,22 @@ makesockaddr(int sockfd, struct sockaddr
 	}
 #endif
 
+#ifdef ENABLE_CAN
+	case AF_CAN:
+	{
+		struct sockaddr_can *a = (struct sockaddr_can *)addr;
+		char *ifname = "";
+		struct ifreq ifr;
+		/* need to look up interface name give index */
+		if (a->can_ifindex) {
+			ifr.ifr_ifindex = a->can_ifindex;
+			if (ioctl(sockfd, SIOCGIFNAME, &ifr) == 0)
+				ifname = ifr.ifr_name;
+		}
+		return Py_BuildValue("s", ifname);
+	}
+#endif
+
 #ifdef USE_BLUETOOTH
 	case AF_BLUETOOTH:
 		switch (proto) {
@@ -1208,6 +1228,29 @@ getsockaddrarg(PySocketSockObject *s, Py
 	}
 #endif
 
+#ifdef ENABLE_CAN
+	case AF_CAN:
+	{
+		struct sockaddr_can* addr;
+		struct ifreq ifr;
+		char *interfaceName;
+		addr=&(s->sock_addr.can);
+		if (!PyArg_Parse(args, "s", &interfaceName))
+			return 0;
+		strncpy(ifr.ifr_name, interfaceName, sizeof(ifr.ifr_name));
+		ifr.ifr_name[(sizeof(ifr.ifr_name))-1] = '\0';
+		if (ioctl(s->sock_fd, SIOCGIFINDEX, &ifr) < 0) {
+		        s->errorhandler();
+			return 0;
+		}
+		addr->can_family = AF_CAN;
+		addr->can_ifindex = ifr.ifr_ifindex;
+		*addr_ret = (struct sockaddr *) addr;
+		*len_ret = sizeof *addr;
+		return 1;
+	}
+#endif
+
 #ifdef USE_BLUETOOTH
 	case AF_BLUETOOTH:
 	{
@@ -1362,6 +1405,14 @@ getsockaddrlen(PySocketSockObject *s, so
 	}
 #endif
 
+#ifdef ENABLE_CAN
+	case AF_CAN:
+	{
+		*len_ret = sizeof (struct sockaddr_can);
+		return 1;
+	}
+#endif
+
 #ifdef USE_BLUETOOTH
 	case AF_BLUETOOTH:
 	{
@@ -4088,6 +4139,10 @@ init_socket(void)
 	PyModule_AddIntConstant(m, "AF_LLC", AF_LLC);
 #endif
 
+#ifdef ENABLE_CAN
+	PyModule_AddIntConstant(m, "AF_CAN", AF_CAN);
+#endif
+
 #ifdef USE_BLUETOOTH
 	PyModule_AddIntConstant(m, "AF_BLUETOOTH", AF_BLUETOOTH);
 	PyModule_AddIntConstant(m, "BTPROTO_L2CAP", BTPROTO_L2CAP);
@@ -4372,6 +4427,41 @@ init_socket(void)
 	PyModule_AddIntConstant(m, "IPPROTO_MAX", IPPROTO_MAX);
 #endif
 
+#ifdef	CAN_RAW
+	PyModule_AddIntConstant(m, "CAN_RAW", CAN_RAW);
+#endif
+#ifdef	CAN_BCM
+	PyModule_AddIntConstant(m, "CAN_BCM", CAN_BCM);
+#endif
+#ifdef	CAN_TP16
+	PyModule_AddIntConstant(m, "CAN_TP16", CAN_TP16);
+#endif
+#ifdef	CAN_TP20
+	PyModule_AddIntConstant(m, "CAN_TP20", CAN_TP20);
+#endif
+#ifdef	CAN_MCNET
+	PyModule_AddIntConstant(m, "CAN_MCNET", CAN_MCNET);
+#endif
+#ifdef	CAN_ISOTP
+	PyModule_AddIntConstant(m, "CAN_ISOTP", CAN_ISOTP);
+#endif
+#ifdef	CAN_NPROTO
+	PyModule_AddIntConstant(m, "CAN_NPROTO", CAN_NPROTO);
+#endif
+
+#ifdef	SOL_CAN_BASE
+	PyModule_AddIntConstant(m, "SOL_CAN_BASE", SOL_CAN_BASE);
+#endif
+#ifdef	SOL_CAN_RAW
+	PyModule_AddIntConstant(m, "SOL_CAN_RAW", SOL_CAN_RAW);
+#endif
+#ifdef ENABLE_CAN
+	PyModule_AddIntConstant(m, "CAN_RAW_FILTER", CAN_RAW_FILTER);
+	PyModule_AddIntConstant(m, "CAN_RAW_ERR_FILTER", CAN_RAW_ERR_FILTER);
+	PyModule_AddIntConstant(m, "CAN_RAW_LOOPBACK", CAN_RAW_LOOPBACK);
+	PyModule_AddIntConstant(m, "CAN_RAW_RECV_OWN_MSGS", CAN_RAW_RECV_OWN_MSGS);
+#endif
+
 	/* Some port configuration */
 #ifdef	IPPORT_RESERVED
 	PyModule_AddIntConstant(m, "IPPORT_RESERVED", IPPORT_RESERVED);
Index: Python-2.4.6/configure.in
===================================================================
--- Python-2.4.6.orig/configure.in
+++ Python-2.4.6/configure.in
@@ -1067,6 +1067,19 @@ AC_CHECK_HEADERS(term.h,,,[
 #endif
 ])
 
+AC_CHECK_HEADERS(linux/can.h,[],[],[#include <sys/socket.h>])
+# check for AF_CAN
+AC_TRY_COMPILE(
+    [[#include <sys/socket.h>
+      int domain = AF_CAN;]],
+    [[socket(domain, 0, 0);]],
+    [],
+    [
+        AC_DEFINE(AF_CAN, 29, [Define AF_CAN if not defined by sys/socket.h])
+        AC_DEFINE(PF_CAN, 29, [Define PF_CAN if not defined by sys/socket.h])
+    ]
+)
+
 # checks for typedefs
 was_it_defined=no
 AC_MSG_CHECKING(for clock_t in time.h)
