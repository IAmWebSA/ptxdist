# 
# Submitted:
#
# Dan Kegel 
# Sun, 17 Oct 2004 16:53:15 -0700
# 
# Robert Schwebel
# 2005-09-29: ported to python 2.4.2
#
# Description: 
#
# Make python cross compile
#
# State:
# 
# unknown
#

---
 setup.py |   82 +++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 41 insertions(+), 41 deletions(-)

Index: Python-2.4.6/setup.py
===================================================================
--- Python-2.4.6.orig/setup.py
+++ Python-2.4.6/setup.py
@@ -240,8 +240,8 @@ class PyBuildExt(build_ext):
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+	add_dir_to_list(self.compiler.library_dirs, os.getenv('DESTDIR')+'/usr/local/lib')
+	add_dir_to_list(self.compiler.include_dirs, os.getenv('DESTDIR')+'/usr/local/include')
 
         # Add paths to popular package managers on OS X/darwin
         if sys.platform == "darwin":
@@ -267,10 +267,10 @@ class PyBuildExt(build_ext):
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
         lib_dirs = self.compiler.library_dirs + [
-            '/lib64', '/usr/lib64',
-            '/lib', '/usr/lib',
+            os.getenv('DESTDIR')+'/lib64', os.getenv('DESTDIR')+'/usr/lib64',
+            os.getenv('DESTDIR')+'/lib', os.getenv('DESTDIR')+'/usr/lib',
             ]
-        inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        inc_dirs = self.compiler.include_dirs + [os.getenv('DESTDIR')+'/usr/include']
         exts = []
 
         platform = self.get_platform()
@@ -450,7 +450,7 @@ class PyBuildExt(build_ext):
             elif self.compiler.find_library_file(lib_dirs, 'curses'):
                 readline_libs.append('curses')
             elif self.compiler.find_library_file(lib_dirs +
-                                               ['/usr/lib/termcap'],
+                                               [os.getenv('DESTDIR')+'/usr/lib/termcap'],
                                                'termcap'):
                 readline_libs.append('termcap')
 
@@ -465,7 +465,7 @@ class PyBuildExt(build_ext):
                 readline_extra_link_args = ()
 
             exts.append( Extension('readline', ['readline.c'],
-                                   library_dirs=['/usr/lib/termcap'],
+                                   library_dirs=[os.getenv('DESTDIR')+'/usr/lib/termcap'],
                                    extra_link_args=readline_extra_link_args,
                                    libraries=readline_libs) )
         if platform not in ['mac']:
@@ -485,18 +485,18 @@ class PyBuildExt(build_ext):
                                depends = ['socketmodule.h']) )
         # Detect SSL support for the socket module (via _ssl)
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
-                             ['/usr/local/ssl/include',
-                              '/usr/contrib/ssl/include/'
+                             [os.getenv('DESTDIR')+'/usr/local/ssl/include',
+                              os.getenv('DESTDIR')+'/usr/contrib/ssl/include/'
                              ]
                              )
         if ssl_incs is not None:
             krb5_h = find_file('krb5.h', inc_dirs,
-                               ['/usr/kerberos/include'])
+                               [os.getenv('DESTDIR')+'/usr/kerberos/include'])
             if krb5_h:
                 ssl_incs += krb5_h
         ssl_libs = find_library_file(self.compiler, 'ssl',lib_dirs,
-                                     ['/usr/local/ssl/lib',
-                                      '/usr/contrib/ssl/lib/'
+                                     [os.getenv('DESTDIR')+'/usr/local/ssl/lib',
+                                      os.getenv('DESTDIR')+'/usr/contrib/ssl/lib/'
                                      ] )
 
         if (ssl_incs is not None and
@@ -529,30 +529,30 @@ class PyBuildExt(build_ext):
         # construct a list of paths to look for the header file in on
         # top of the normal inc_dirs.
         db_inc_paths = [
-            '/usr/include/db4',
-            '/usr/local/include/db4',
-            '/opt/sfw/include/db4',
-            '/sw/include/db4',
-            '/usr/include/db3',
-            '/usr/local/include/db3',
-            '/opt/sfw/include/db3',
-            '/sw/include/db3',
+            os.getenv('DESTDIR')+'/usr/include/db4',
+            os.getenv('DESTDIR')+'/usr/local/include/db4',
+            os.getenv('DESTDIR')+'/opt/sfw/include/db4',
+            os.getenv('DESTDIR')+'/sw/include/db4',
+            os.getenv('DESTDIR')+'/usr/include/db3',
+            os.getenv('DESTDIR')+'/usr/local/include/db3',
+            os.getenv('DESTDIR')+'/opt/sfw/include/db3',
+            os.getenv('DESTDIR')+'/sw/include/db3',
         ]
         # 4.x minor number specific paths
         for x in (0,1,2,3,4):
-            db_inc_paths.append('/usr/include/db4%d' % x)
-            db_inc_paths.append('/usr/include/db4.%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.4.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db4%d' % x)
-            db_inc_paths.append('/pkg/db-4.%d/include' % x)
-            db_inc_paths.append('/opt/db-4.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/include/db4%d' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/include/db4.%d' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/local/BerkeleyDB.4.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/local/include/db4%d' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/pkg/db-4.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/opt/db-4.%d/include' % x)
         # 3.x minor number specific paths
         for x in (2,3):
-            db_inc_paths.append('/usr/include/db3%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.3.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db3%d' % x)
-            db_inc_paths.append('/pkg/db-3.%d/include' % x)
-            db_inc_paths.append('/opt/db-3.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/include/db3%d' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/local/BerkeleyDB.3.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/usr/local/include/db3%d' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/pkg/db-3.%d/include' % x)
+            db_inc_paths.append(os.getenv('DESTDIR')+'/opt/db-3.%d/include' % x)
 
         # Add some common subdirectories for Sleepycat DB to the list,
         # based on the standard include directories. This way DB3/4 gets
@@ -996,7 +996,7 @@ class PyBuildExt(build_ext):
         # For 8.4a2, the X11 headers are not included. Rather than include a
         # complicated search, this is a hard-coded path. It could bail out
         # if X11 libs are not found...
-        include_dirs.append('/usr/X11R6/include')
+        include_dirs.append(os.getenv('DESTDIR')+'/usr/X11R6/include')
         frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
 
         ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
@@ -1067,17 +1067,17 @@ class PyBuildExt(build_ext):
         if platform == 'sunos5':
             include_dirs.append('/usr/openwin/include')
             added_lib_dirs.append('/usr/openwin/lib')
-        elif os.path.exists('/usr/X11R6/include'):
-            include_dirs.append('/usr/X11R6/include')
-            added_lib_dirs.append('/usr/X11R6/lib64')
-            added_lib_dirs.append('/usr/X11R6/lib')
-        elif os.path.exists('/usr/X11R5/include'):
-            include_dirs.append('/usr/X11R5/include')
-            added_lib_dirs.append('/usr/X11R5/lib')
+        elif os.path.exists(os.getenv('DESTDIR')+'/usr/X11R6/include'):
+            include_dirs.append(os.getenv('DESTDIR')+'/usr/X11R6/include')
+            added_lib_dirs.append(os.getenv('DESTDIR')+'/usr/X11R6/lib64')
+            added_lib_dirs.append(os.getenv('DESTDIR')+'/usr/X11R6/lib')
+        elif os.path.exists(os.getenv('DESTDIR')+'/usr/X11R5/include'):
+            include_dirs.append(os.getenv('DESTDIR')+'/usr/X11R5/include')
+            added_lib_dirs.append(os.getenv('DESTDIR')+'/usr/X11R5/lib')
         else:
             # Assume default location for X11
-            include_dirs.append('/usr/X11/include')
-            added_lib_dirs.append('/usr/X11/lib')
+            include_dirs.append(os.getenv('DESTDIR')+'/usr/X11/include')
+            added_lib_dirs.append(os.getenv('DESTDIR')+'/usr/X11/lib')
 
         # If Cygwin, then verify that X is installed before proceeding
         if platform == 'cygwin':
