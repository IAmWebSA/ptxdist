---
 configure |   46 +++++++++++++++++++++++-----------------------
 1 file changed, 23 insertions(+), 23 deletions(-)

Index: xf86-video-apm-1.2.2/configure
===================================================================
--- xf86-video-apm-1.2.2.orig/configure
+++ xf86-video-apm-1.2.2/configure
@@ -8322,7 +8322,7 @@ EOF
 
 	if test $supports_anon_versioning = yes; then
 	  archive_expsym_cmds='$echo "{ global:" > $output_objdir/$libname.ver~
-  cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+  cat $export_symbols | sed -e "s/\(.*\)/'"$ac_symprfx"'\1;/" >> $output_objdir/$libname.ver~
   $echo "local: *; };" >> $output_objdir/$libname.ver~
 	  $CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
 	fi
@@ -9236,7 +9236,7 @@ else
   sys_lib_search_path_spec="/lib /usr/lib /usr/local/lib"
 fi
 need_lib_prefix=unknown
-hardcode_into_libs=no
+hardcode_into_libs="no"
 
 # when you set need_version to no, make sure it does not cause -set_version
 # flags to be left without arguments
@@ -11091,16 +11091,16 @@ shlibpath_overrides_runpath=$shlibpath_o
 hardcode_action=$hardcode_action
 
 # Whether we should hardcode library paths into libraries.
-hardcode_into_libs=$hardcode_into_libs
+hardcode_into_libs="no"
 
 # Flag to hardcode \$libdir into a binary during linking.
 # This must work even if \$libdir does not exist.
-hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec
+hardcode_libdir_flag_spec=""
 
 # If ld is used when linking, flag to hardcode \$libdir into
 # a binary during linking. This must work even if \$libdir does
 # not exist.
-hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld
+hardcode_libdir_flag_spec_ld=""
 
 # Whether we need a single -rpath flag with a separated argument.
 hardcode_libdir_separator=$lt_hardcode_libdir_separator
@@ -13238,7 +13238,7 @@ dynamic_linker="$host_os ld.so"
 sys_lib_dlsearch_path_spec="/lib /usr/lib"
 
 need_lib_prefix=unknown
-hardcode_into_libs=no
+hardcode_into_libs="no"
 
 # when you set need_version to no, make sure it does not cause -set_version
 # flags to be left without arguments
@@ -14172,16 +14172,16 @@ shlibpath_overrides_runpath=$shlibpath_o
 hardcode_action=$hardcode_action_CXX
 
 # Whether we should hardcode library paths into libraries.
-hardcode_into_libs=$hardcode_into_libs
+hardcode_into_libs="no"
 
 # Flag to hardcode \$libdir into a binary during linking.
 # This must work even if \$libdir does not exist.
-hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_CXX
+hardcode_libdir_flag_spec=""
 
 # If ld is used when linking, flag to hardcode \$libdir into
 # a binary during linking. This must work even if \$libdir does
 # not exist.
-hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld_CXX
+hardcode_libdir_flag_spec_ld=""
 
 # Whether we need a single -rpath flag with a separated argument.
 hardcode_libdir_separator=$lt_hardcode_libdir_separator_CXX
@@ -15026,7 +15026,7 @@ EOF
 
 	if test $supports_anon_versioning = yes; then
 	  archive_expsym_cmds_F77='$echo "{ global:" > $output_objdir/$libname.ver~
-  cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+  cat $export_symbols | sed -e "s/\(.*\)/'"$ac_symprfx"'\1;/" >> $output_objdir/$libname.ver~
   $echo "local: *; };" >> $output_objdir/$libname.ver~
 	  $CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
 	fi
@@ -15869,7 +15869,7 @@ dynamic_linker="$host_os ld.so"
 sys_lib_dlsearch_path_spec="/lib /usr/lib"
 
 need_lib_prefix=unknown
-hardcode_into_libs=no
+hardcode_into_libs="no"
 
 # when you set need_version to no, make sure it does not cause -set_version
 # flags to be left without arguments
@@ -16803,16 +16803,16 @@ shlibpath_overrides_runpath=$shlibpath_o
 hardcode_action=$hardcode_action_F77
 
 # Whether we should hardcode library paths into libraries.
-hardcode_into_libs=$hardcode_into_libs
+hardcode_into_libs="no"
 
 # Flag to hardcode \$libdir into a binary during linking.
 # This must work even if \$libdir does not exist.
-hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_F77
+hardcode_libdir_flag_spec=""
 
 # If ld is used when linking, flag to hardcode \$libdir into
 # a binary during linking. This must work even if \$libdir does
 # not exist.
-hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld_F77
+hardcode_libdir_flag_spec_ld=""
 
 # Whether we need a single -rpath flag with a separated argument.
 hardcode_libdir_separator=$lt_hardcode_libdir_separator_F77
@@ -17637,7 +17637,7 @@ EOF
 
 	if test $supports_anon_versioning = yes; then
 	  archive_expsym_cmds_GCJ='$echo "{ global:" > $output_objdir/$libname.ver~
-  cat $export_symbols | sed -e "s/\(.*\)/\1;/" >> $output_objdir/$libname.ver~
+  cat $export_symbols | sed -e "s/\(.*\)/'"$ac_symprfx"'\1;/" >> $output_objdir/$libname.ver~
   $echo "local: *; };" >> $output_objdir/$libname.ver~
 	  $CC '"$tmp_sharedflag""$tmp_addflag"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'
 	fi
@@ -18500,7 +18500,7 @@ dynamic_linker="$host_os ld.so"
 sys_lib_dlsearch_path_spec="/lib /usr/lib"
 
 need_lib_prefix=unknown
-hardcode_into_libs=no
+hardcode_into_libs="no"
 
 # when you set need_version to no, make sure it does not cause -set_version
 # flags to be left without arguments
@@ -19434,16 +19434,16 @@ shlibpath_overrides_runpath=$shlibpath_o
 hardcode_action=$hardcode_action_GCJ
 
 # Whether we should hardcode library paths into libraries.
-hardcode_into_libs=$hardcode_into_libs
+hardcode_into_libs="no"
 
 # Flag to hardcode \$libdir into a binary during linking.
 # This must work even if \$libdir does not exist.
-hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_GCJ
+hardcode_libdir_flag_spec=""
 
 # If ld is used when linking, flag to hardcode \$libdir into
 # a binary during linking. This must work even if \$libdir does
 # not exist.
-hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld_GCJ
+hardcode_libdir_flag_spec_ld=""
 
 # Whether we need a single -rpath flag with a separated argument.
 hardcode_libdir_separator=$lt_hardcode_libdir_separator_GCJ
@@ -19920,16 +19920,16 @@ shlibpath_overrides_runpath=$shlibpath_o
 hardcode_action=$hardcode_action_RC
 
 # Whether we should hardcode library paths into libraries.
-hardcode_into_libs=$hardcode_into_libs
+hardcode_into_libs="no"
 
 # Flag to hardcode \$libdir into a binary during linking.
 # This must work even if \$libdir does not exist.
-hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_RC
+hardcode_libdir_flag_spec=""
 
 # If ld is used when linking, flag to hardcode \$libdir into
 # a binary during linking. This must work even if \$libdir does
 # not exist.
-hardcode_libdir_flag_spec_ld=$lt_hardcode_libdir_flag_spec_ld_RC
+hardcode_libdir_flag_spec_ld=""
 
 # Whether we need a single -rpath flag with a separated argument.
 hardcode_libdir_separator=$lt_hardcode_libdir_separator_RC
@@ -21512,7 +21512,7 @@ fi
 
 
 CFLAGS="$CFLAGS $XORG_CFLAGS $XF86RUSH_CFLAGS"' -I$(top_srcdir)/src'
-INCLUDES="$XORG_INCS -I${sdkdir} $XF86RUSH_INCS "'-I$(top_srcdir)/src -I$(prefix)/include'
+INCLUDES="$XORG_INCS -I${sdkdir} $XF86RUSH_INCS -I$(top_srcdir)/src"
 
 
 
