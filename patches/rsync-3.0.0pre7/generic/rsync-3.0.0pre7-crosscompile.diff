Subject: Cross compilation does not work
From: Robert Schwebel <r.schwebel@pengutronix.de>

The makefiles try to build the "mkrounding" tool with the "host" compiler;
however, this file is being executed later in the build, so it has to be
compiled with the "build" compiler. Usually, autotoolized Makefiles solve this
by using CC_FOR_BUILD and the related CFLAGS_FOR_BUILD and LDFLAGS_FOR_BUILD.

Error message, taken during a build for ARM here:

----------8<----------8<----------
arm-v4t-linux-gnueabi-gcc -std=gnu99 -g -O2 -DHAVE_CONFIG_H -Wall -W -I./popt
-L/some/path/sysroot/arm-v4t-linux-gnueabi/lib
-L/some/path/sysroot/arm-v4t-linux-gnueabi/usr/lib -Wl,-rpath-link
-Wl,/some/path/sysroot/arm-v4t-linux-gnueabi/usr/lib -o mkrounding -I.
./mkrounding.c
./mkrounding >rounding.h
/bin/sh: ./mkrounding: cannot execute binary file
----------8<----------8<----------

Signed-off-by: Robert Schwebel <r.schwebel@pengutronix.de>

---
 Makefile.in  |    5 ++++-
 configure.in |   12 ++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

Index: Makefile.in
===================================================================
--- Makefile.in.orig
+++ Makefile.in
@@ -9,10 +9,13 @@ mandir=@mandir@
 
 LIBS=@LIBS@
 CC=@CC@
+CC_FOR_BUILD=@CC_FOR_BUILD@
 CFLAGS=@CFLAGS@
+CFLAGS_FOR_BUILD=@CFLAGS_FOR_BUILD@
 CPPFLAGS=@CPPFLAGS@
 EXEEXT=@EXEEXT@
 LDFLAGS=@LDFLAGS@
+LDFLAGS_FOR_BUILD=@LDFLAGS_FOR_BUILD@
 
 INSTALLCMD=@INSTALL@
 INSTALLMAN=@INSTALL@
@@ -85,7 +88,7 @@ rounding.h: mkrounding$(EXEEXT)
 
 mkrounding$(EXEEXT): mkrounding.c rsync.h
 	@sed '1,/^struct file_struct/d; /^}/,$$d' <$(srcdir)/rsync.h >mkrounding.h
-	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ -I. $(srcdir)/mkrounding.c
+	$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@ -I. $(srcdir)/mkrounding.c
 	@rm mkrounding.h
 
 tls$(EXEEXT): $(TLS_OBJ)
Index: configure.in
===================================================================
--- configure.in.orig
+++ configure.in
@@ -23,6 +23,18 @@ AC_PROG_INSTALL
 AC_PROG_CC_STDC
 AC_SUBST(SHELL)
 
+# build tools for cross compiling
+if test "x$cross_compiling" = "xno"; then
+        CC_FOR_BUILD=${CC_FOR_BUILD-${CC-gcc}}
+else
+        CC_FOR_BUILD=${CC_FOR_BUILD-gcc}
+fi
+CFLAGS_FOR_BUILD=-O2
+LDFLAGS_FOR_BUILD=
+AC_SUBST(CC_FOR_BUILD)
+AC_SUBST(CFLAGS_FOR_BUILD)
+AC_SUBST(LDFLAGS_FOR_BUILD)
+
 AC_DEFINE([_GNU_SOURCE], 1,
           [Define _GNU_SOURCE so that we get all necessary prototypes])
 
