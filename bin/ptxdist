#!/bin/bash

#
# TODO
#
# - add compilercheck 
#
# - split images out of Makefile; we should have a command "image jffs2"
#   which starts a corresponding script in scripts/
#
#

PROMPT="ptxdist: "
PTXDIST_WORKSPACE=$(pwd)
DEBUG=

if [ -L "$0" ]; then
	PTXDIST_TOPDIR=$(cd $(dirname $(readlink $0))/.. && pwd)
else
	PTXDIST_TOPDIR=$(cd $(dirname $0)/.. && pwd)
fi

export PTXDIST_WORKSPACE PTXDIST_TOPDIR


#
# sanity check: is PTXdist already configured?
#

if [ ! -e ${PTXDIST_TOPDIR}/.done ]; then
	echo
	echo "${PROMPT}error: PTXdist in ${PTXDIST_TOPDIR} is not built."
	echo
	exit 1
fi


#
# we need the PTXdist shell library
#

libptxdist=${PTXDIST_TOPDIR}/scripts/libptxdist.sh

if [ -e "$libptxdist" ]; then 
	. $libptxdist
else
	echo "${PROMPT}didn't find \$(PTXDIST_TOPDIR)/scripts/libptxdist.sh"
	exit 1
fi


#
# we need the static variable definitions
#

ptxdistvars=${PTXDIST_TOPDIR}/scripts/ptxdistvars.sh

if [ -e "$ptxdistvars" ]; then
	. $ptxdistvars
else
	echo "${PROMPT}didn't find \$(PTXDIST_TOPDIR)/scripts/ptxdistvars.sh"
	exit 1
fi


# source the user's .ptxdistrc
[ -e "$HOME/.ptxdistrc" ] && . $HOME/.ptxdistrc

# use linked toolchain if available
[ -d ".toolchain" ] && export PATH=`pwd`/.toolchain:$PATH

#
# usage()
#

usage() {
cat << EOF

PTXdist `printf "%-24s" ${FULLVERSION}` Build System for Embedded Linux Systems

  ptxdist <action [args]> [options]

Setup and Project Actions:

  setup                          setup per-user preferences

  projects                       show available projects
  clone <from> <to>              create a new project, cloned from <from>. 

  menuconfig                     configure the root filesystem
  oldconfig                      run 'make oldconfig' on ptxconfig file

  toolchain <path>               select this toolchain (path to binaries)

Build Actions:

  go                             start building the current project

  get <package>                  get packet sources
  prepare <package>              run configure stages for packet
  compile <package>              compile the sources
  install <package>              install host side components into sysroot/
  targetinstall <package>        install files for target into root/
  clean <package>                cleanup packet

  images                         build images for target system

Clean Actions:

  clean                          cleanup build-host and build-cross dirs
  distclean                      cleanup everything
  (clean images)                 cleanup images directory
  (clean root)                   cleanup root directory for target
  (clean project)                cleanup project specific packages
  (clean maintainer)             maintainerclean
	
  (svn up)                       run "svn update" in topdir and project dir
  (svn stat)                     run "svn stat" in topdir and project dir

  test <testname>                run tests

Environment:

  NATIVE=1                       build with native compiler 
			         instead of cross compiler
  PREFIX=<path>                  build into this directory, instead of
			         building into PTXCONF_PREFIX from config

EOF
}

clean() {

	if [ -n "$1" ]; then
		make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make $1_clean PTXDIST_TOPDIR=${PTXDIST_TOPDIR}
		return
	fi

	echo
	echo "${PROMPT}removing build directories..."
	rm -fr build-cross
	rm -fr build-host
	rm -fr build-target
	echo "${PROMPT}removing deps..."
	rm -f depend.out deptree-a4.ps deptree.ps
	echo "${PROMPT}removing imagedir..."
	rm -fr images
	echo "${PROMPT}removing sysroot directory (local)..."
	rm -fr local
	echo "${PROMPT}removing sysroot..."
	rm -fr sysroot
	echo "${PROMPT}removing root..."
	rm -fr root
	echo "${PROMPT}removing state..."
	rm -fr state
	echo "${PROMPT}removing logfile..."
	rm -f logfile
	echo "${PROMPT}done."
	echo
}

menuconfig() {
	echo

	# check if this is a PTXdist project dir
	if [ -z "$(find . -maxdepth 1 -name "ptxconfig" | grep -v .svn)" ]; then
		echo "${PROMPT}error: no ptxconfig file found."
		echo "${PROMPT}error: check if this is a PTXdist project directory"
		echo
		exit 1
	fi

	echo "${PROMPT}menuconfig..."
	tmpdir=`mktemp -d -t ptxdist.XXXXXX`

	pushd $tmpdir > /dev/null
	ln -sf ${PTXDIST_TOPDIR}/scripts
	ln -sf ${PTXDIST_TOPDIR}/rules
	ln -sf ${PTXDIST_TOPDIR}/config
	ln -sf ${PTXDIST_WORKSPACE} workspace
	cp ${PTXDIST_WORKSPACE}/ptxconfig .config
	if [ -e "${PTXDIST_WORKSPACE}/Kconfig" ]; then
		${PTXDIST_TOPDIR}/scripts/kconfig/mconf ${PTXDIST_WORKSPACE}/Kconfig
		echo "${PROMPT}silentoldconfig..."
		${PTXDIST_TOPDIR}/scripts/kconfig/conf -s ${PTXDIST_WORKSPACE}/Kconfig
	else
		${PTXDIST_TOPDIR}/scripts/kconfig/mconf config/Kconfig
		echo "${PROMPT}silentoldconfig..."
		${PTXDIST_TOPDIR}/scripts/kconfig/conf -s config/Kconfig
	fi

	echo "${PROMPT}saving ptxconfig"
	cp .config ${PTXDIST_WORKSPACE}/ptxconfig

	popd > /dev/null
	echo "${PROMPT}cleanup..."
	rm -fr $tmpdir
	echo
}

oldconfig() {
	echo

	# check if this is a PTXdist project dir
	if [ -z "$(find . -maxdepth 1 -name "ptxconfig" | grep -v .svn)" ]; then
		echo "${PROMPT}error: no ptxconfig file found."
		echo "${PROMPT}error: check if this is a PTXdist project directory"
		echo
		exit 1
	fi

	echo "${PROMPT}oldconfig..."
	tmpdir=`mktemp -d -t ptxdist.XXXXXX`

	pushd $tmpdir > /dev/null
	ln -sf ${PTXDIST_TOPDIR}/scripts
	ln -sf ${PTXDIST_TOPDIR}/rules
	ln -sf ${PTXDIST_TOPDIR}/config
	ln -sf ${PTXDIST_WORKSPACE} workspace
	cp ${PTXDIST_WORKSPACE}/ptxconfig .config
	if [ -e "${PTXDIST_WORKSPACE}/Kconfig" ]; then
		${PTXDIST_TOPDIR}/scripts/kconfig/conf -o ${PTXDIST_WORKSPACE}/Kconfig
	else
		${PTXDIST_TOPDIR}/scripts/kconfig/conf -o config/Kconfig
	fi
	echo "${PROMPT}saving ptxconfig"
	cp .config ${PTXDIST_WORKSPACE}/ptxconfig

	popd > /dev/null
	echo "${PROMPT}cleanup..."
	rm -fr $tmpdir
	echo
}

projects() {
	echo
	echo "${PROMPT}searching for projects:"
	echo "${PROMPT}scanning ${PTXDIST_TOPDIR}/projects..."
	projects=`cd ${PTXDIST_TOPDIR}/projects && find . -maxdepth 1 -type d ! -name .svn ! -name .  -exec basename {} \;`
	echo -n "${PROMPT}scanning \${PTXCONF_SETUP_PROJECTDIR}..."
	if [ -d "${PTXCONF_SETUP_PROJECTDIR}" ]; then
	lprojects=`cd ${PTXCONF_SETUP_PROJECTDIR} && find . -maxdepth 1 -type d ! -name .svn ! -name . -exec basename {} \;`
	echo
	else
	echo "not found"
	fi
	projects=`(for i in $projects $lprojects; do echo $i; done) | sort -u`
	echo
	echo "---------------------- Available PTXdist Projects: ----------------------------"
	for i in $projects; do echo $i; done
	echo "-------------------------------------------------------------------------------"
	echo
}

setup() {
	echo
	echo "${PROMPT}setup..."
	tmpdir=`mktemp -d -t ptxdist.XXXXXX`
	pushd $tmpdir > /dev/null

	# prepare everything to make kconfig see it's original environment
	ln -sf ${PTXDIST_TOPDIR}/scripts
	cp ${PTXDIST_TOPDIR}/config/setup/ptxdistrc.default .config
	if [ -f "$HOME/.ptxdistrc" ]; then
		echo "using \$HOME/.ptxdistrc"
		cp $HOME/.ptxdistrc .config
	fi

	# store ~/.ptxdistrc	
	${PTXDIST_TOPDIR}/scripts/kconfig/mconf ${PTXDIST_TOPDIR}/config/setup/Kconfig
	echo "${PROMPT}saving \$HOME/.ptxdistrc"
	cp .config $HOME/.ptxdistrc

	popd > /dev/null
	echo "${PROMPT}cleanup..."
	rm -fr $tmpdir
}

clone() {

	if [ -z "$1" ]; then usage; exit 1; fi
	if [ -z "$2" ]; then usage; exit 1; fi

	if [ -d "$2" ]; then
		echo
		echo "${PROMPT}error: directory $2 does already exist"
		echo
		exit 1
	fi

	echo
	echo "${PROMPT}searching for projects:"
	echo "${PROMPT}scanning ${PTXDIST_TOPDIR}/projects..."
	projects=`cd ${PTXDIST_TOPDIR}/projects && find . -maxdepth 1 -type d ! -name .svn ! -name .  -exec basename {} \;`
	echo -n "${PROMPT}scanning \${PTXCONF_SETUP_PROJECTDIR}..."
	if [ -d "${PTXCONF_SETUP_PROJECTDIR}" ]; then
	lprojects=`cd ${PTXCONF_SETUP_PROJECTDIR} && find . -maxdepth 1 -type d ! -name .svn ! -name . -exec basename {} \;`
	echo
	else
	echo "not found"
	fi
	projects=`(for i in $projects $lprojects; do echo $i; done) | sort -u`
	echo

	for i in $projects; do 
		if [ "$1" = "$i" ]; then
			echo "${PROMPT}cloning project $1 to $2"
			if [ -d "${PTXCONF_SETUP_PROJECTDIR}" ] && 
			   [ -d "${PTXCONF_SETUP_PROJECTDIR}/$1" ] ; then
				cp -a ${PTXCONF_SETUP_PROJECTDIR}/$1 $2
			else
				cp -a ${PTXDIST_TOPDIR}/projects/$1 $2
			fi
			echo "${PROMPT}done."
			echo
			return
		fi
	done

	echo "${PROMPT}project $1 is to be cloned, but could not be found"
	echo
}


#
# main()
#

if [ "$#" = "0" ]; then
	usage
	exit 0
fi

while [ "$#" != "0" ]; do 

	case $1 in 
	compile)	shift
			if [ "$#" = "0" ]; then
				echo "${PROMPT}error: add target you want to compile"
				exit 1
			fi
			echo "make -f ${PTXDIST_TOPDIR}/rules/Toplevel.make $* PTXDIST_TOPDIR=${PTXDIST_TOPDIR}"
			make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make $* PTXDIST_TOPDIR=${PTXDIST_TOPDIR}
			exit $?
			;;
	clean)		shift 
			clean $1
			exit 0
			;;
	clone)		shift; clone $1 $2; exit 0;;
	-d|--debug)	shift; MAKEDBG="--debug=make"; ;;
	distclean)	shift
			clean
			echo "${PROMPT}removing toolchain link..."
			rm -f .toolchain
			echo "${PROMPT}removing logs dir..."
			rm -fr logs
			echo
			;;
	extract)	shift ;;
	get)		shift
			make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make $1_get PTXDIST_TOPDIR=${PTXDIST_TOPDIR}
			exit $?
			;;
	go)		shift
			make \
				$MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make \
				world PTXDIST_TOPDIR=${PTXDIST_TOPDIR} 2>&1 | tee -a logfile
			exit $?
			;;
	help|--help)	shift; usage; exit 0; ;;
	images)		shift
			make \
				$MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make \
				images PTXDIST_TOPDIR=${PTXDIST_TOPDIR} 2>&1 | tee -a logfile
			image $1
			exit $?
			;;
	install)	shift ;;
	make)		shift; make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make PTXDIST_TOPDIR=${PTXDIST_TOPDIR};;
	menuconfig)	shift; menuconfig;;
	oldconfig)	shift; oldconfig;;
	prepare)	shift
			make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make $1_prepare PTXDIST_TOPDIR=${PTXDIST_TOPDIR}
			exit $?
			;;
	print)		shift
			make $MAKEDBG -f ${PTXDIST_TOPDIR}/rules/Toplevel.make print-$1 PTXDIST_TOPDIR=${PTXDIST_TOPDIR}
			shift
			;;
			
	projects)	shift; projects;;
	setup)		shift; setup;;
	targetinstall)	shift; ;;
	test)		shift
			if [ -x "$PTXDIST_WORKSPACE/tests/$1" ]; then
				echo
				echo "${PROMPT}starting test $1"
				$PTXDIST_WORKSPACE/tests/$1
				echo "${PROMPT}test $1 finished"
				echo
			else if [ -x "$PTXDIST_TOPDIR/tests/$1" ]; then
				echo
				echo "${PROMPT}starting test $1"
				$PTXDIST_TOPDIR/tests/$1
				echo "${PROMPT}test $1 finished"
				echo
			else
				echo
				echo "${PROMPT}error: test $i not found in PTXDIST_TOPDIR and PTXDIST_WORKSPACE"	
				echo
			fi
			fi
			exit 0
			;;	
	toolchain)	shift
			echo
			if [ ! -d "$1" ]; then
				echo "${PROMPT}error: path $1 does not exist"
				echo
				exit 1
			fi
			echo "${PROMPT}using toolchain in $1"
			ln -sf $1 .toolchain
			echo
			exit 0
			;;
	*)		shift; usage;;
	esac

done

exit 0

