diff -NaurEbwB kdrive_alt/chips/Imakefile xc/programs/Xserver/hw/kdrive/chips/Imakefile
--- kdrive_alt/chips/Imakefile	2001-09-05 09:12:41.000000000 +0200
+++ xc/programs/Xserver/hw/kdrive/chips/Imakefile	2004-02-16 16:09:48.000000000 +0100
@@ -7,7 +7,7 @@
 
 OBJS = 	chips.o chipsdraw.o chipsstub.o
 
-INCLUDES = -I. $(KDINCS) -I$(KDRIVE)/vesa
+INCLUDES = -I. $(KDINCS) -I$(KDRIVE)/fbdev
 
 NormalLibraryObjectRule()
 NormalLibraryTarget(chips,$(OBJS))
diff -NaurEbwB kdrive_alt/chips/chips.c xc/programs/Xserver/hw/kdrive/chips/chips.c
--- kdrive_alt/chips/chips.c	2001-09-05 09:12:41.000000000 +0200
+++ xc/programs/Xserver/hw/kdrive/chips/chips.c	2004-02-17 13:37:27.000000000 +0100
@@ -41,7 +41,7 @@
     
     iopl (3);
     
-    if (!vesaInitialize (card, &chipsc->vesa))
+    if (!fbdevInitialize (card, &chipsc->fb))
     {
 	xfree (chipsc);
 	return FALSE;
@@ -70,24 +70,24 @@
     if (!chipss)
 	return FALSE;
     memset (chipss, '\0', sizeof (ChipsScreenInfo));
-    if (!vesaScreenInitialize (screen, &chipss->vesa))
+    if (!fbdevScreenInitialize (screen, &chipss->fbdev))
     {
 	xfree (chipss);
 	return FALSE;
     }
 
-    if (chipss->vesa.mapping != VESA_LINEAR)
-	screen->dumb = TRUE;
+
+
     if (!screen->dumb)
-    {
-	chipss->mmio_base = (CARD8 *) KdMapDevice (CHIPS_MMIO_BASE(chipss),
-						   CHIPS_MMIO_SIZE(chipss));
+    { /* map physical to virtual */
+	chipss->mmio_base = (CARD8 *) KdMapDevice (CHIPS_MMIO_BASE(chipsc),
+						   CHIPS_MMIO_SIZE(chipsc));
 	
 	if (chipss->mmio_base)
-	{
-	    KdSetMappedMode (CHIPS_MMIO_BASE(chipss),
-			     CHIPS_MMIO_SIZE(chipss),
-			     KD_MAPPED_MODE_REGISTERS);
+	{	/* try to use MTRR on x86 to speed up, does nothing on other platforms */
+	    KdSetMappedMode (CHIPS_MMIO_BASE(chipsc),
+			     CHIPS_MMIO_SIZE(chipsc),
+			     KD_MAPPED_MODE_REGISTERS);	/* means uncachable area */
 	}
 	else
 	    screen->dumb = TRUE;
@@ -95,8 +95,8 @@
     else
 	chipss->mmio_base = 0;
 
-    chipss->screen = chipss->vesa.fb;
-    memory = chipss->vesa.fb_size;
+    chipss->screen = chipsc->fb.fb;
+    memory = (2048 + 512) * 1024;
     
     screen_size = screen->fb[0].byteStride * screen->height;
     
@@ -125,13 +125,13 @@
 Bool
 chipsInitScreen (ScreenPtr pScreen)
 {
-    return vesaInitScreen (pScreen);
+    return fbdevInitScreen (pScreen);
 }
 
 Bool
 chipsFinishInitScreen (ScreenPtr pScreen)
 {
-    return vesaFinishInitScreen (pScreen);
+    return(TRUE);
 }
 
 CARD8
@@ -186,7 +186,7 @@
 chipsPreserve (KdCardInfo *card)
 {
     ChipsCardInfo	*chipss = card->driver;
-    vesaPreserve(card);
+    fbdevPreserve(card);
 }
 
 void
@@ -205,7 +205,7 @@
     KdScreenPriv(pScreen);
     ChipsCardInfo	*chipsc = pScreenPriv->card->driver;
 
-    if (!vesaEnable (pScreen))
+    if (!fbdevEnable (pScreen))
 	return FALSE;
     chipsSetMMIO (chipsc);
     return TRUE;
@@ -229,7 +229,7 @@
 void
 chipsDisable (ScreenPtr pScreen)
 {
-    vesaDisable (pScreen);
+    fbdevDisable (pScreen);
 }
 
 void
@@ -238,22 +238,23 @@
     ChipsCardInfo	*chipsc = card->driver;
 
     chipsResetMMIO (chipsc);
-    vesaRestore (card);
+    fbdevRestore (card);
 }
 
 void
 chipsScreenFini (KdScreenInfo *screen)
 {
+    ChipsCardInfo	*chipsc = screen->card->driver;
     ChipsScreenInfo	*chipss = (ChipsScreenInfo *) screen->driver;
 
     if (chipss->mmio_base)
     {
-	KdUnmapDevice ((void *) chipss->mmio_base, CHIPS_MMIO_SIZE(chipss));
-	KdResetMappedMode (CHIPS_MMIO_BASE(chipss),
-			   CHIPS_MMIO_SIZE(chipss),
+	KdUnmapDevice ((void *) chipss->mmio_base, CHIPS_MMIO_SIZE(chipsc));
+	KdResetMappedMode (CHIPS_MMIO_BASE(chipsc),
+			   CHIPS_MMIO_SIZE(chipsc),
 			   KD_MAPPED_MODE_REGISTERS);
     }
-    vesaScreenFini (screen);
+
     xfree (chipss);
     screen->driver = 0;
 }
@@ -263,7 +264,7 @@
 {
     ChipsCardInfo	*chipsc = card->driver;
 
-    vesaCardFini (card);
+    fbdevCardFini (card);
 }
 
 #define chipsCursorInit	(void *) 0
@@ -278,7 +279,7 @@
     chipsInitScreen,	    /* initScreen */
     chipsPreserve,	    /* preserve */
     chipsEnable,	    /* enable */
-    vesaDPMS,		    /* dpms */
+    chipsDPMS,		    /* dpms */
     chipsDisable,	    /* disable */
     chipsRestore,	    /* restore */
     chipsScreenFini,	    /* scrfini */
@@ -296,7 +297,7 @@
     chipsDrawDisable,     /* disableAccel */
     chipsDrawFini,        /* finiAccel */
     
-    vesaGetColors,    	    /* getColors */
-    vesaPutColors,	    /* putColors */
+    fbdevGetColors,    	    /* getColors */
+    fbdevPutColors,	    /* putColors */
     chipsFinishInitScreen /* finishInitScreen */
 };
diff -NaurEbwB kdrive_alt/chips/chips.h xc/programs/Xserver/hw/kdrive/chips/chips.h
--- kdrive_alt/chips/chips.h	2001-09-05 09:12:41.000000000 +0200
+++ xc/programs/Xserver/hw/kdrive/chips/chips.h	2004-02-17 13:26:40.000000000 +0100
@@ -25,7 +25,7 @@
 
 #ifndef _CHIPS_H_
 #define _CHIPS_H_
-#include <vesa.h>
+#include <fbdev.h>
 
 /*
  * offset from ioport beginning 
@@ -33,9 +33,9 @@
 
 #define HIQV
 #ifdef HIQV
-#define CHIPS_MMIO_BASE(c)	((c)->vesa.fb_phys + 0x400000)
+#define CHIPS_MMIO_BASE(c)	((c)->fb.fix.smem_start + 0x400000)
 #else
-#define CHIPS_MMIO_BASE(c)	((c)->vesa.fb_phys + 0x200000)
+#define CHIPS_MMIO_BASE(c)	((c)->fb.fix.smem_start + 0x200000)
 #endif
 #define CHIPS_MMIO_SIZE(c)	(0x20000)
 
@@ -48,7 +48,7 @@
 } ChipsSave;
 
 typedef struct _chipsCardInfo {
-    VesaCardPrivRec	vesa;
+    FbdevPriv		fb;
     CARD32		*window;
     Bool		mmio;
     ChipsSave		save;
@@ -69,7 +69,7 @@
 #define CHIPS_CURSOR_HEIGHT	64
 
 typedef struct _chipsScreenInfo {
-    VesaScreenPrivRec	vesa;
+    FbdevScrPriv    fbdev;
     CARD8	    *mmio_base;
     CARD8	    *cursor_base;
     CARD8	    *screen;
diff -NaurEbwB kdrive_alt/chips/chipsstub.c xc/programs/Xserver/hw/kdrive/chips/chipsstub.c
--- kdrive_alt/chips/chipsstub.c	2001-10-12 08:33:08.000000000 +0200
+++ xc/programs/Xserver/hw/kdrive/chips/chipsstub.c	2004-02-17 13:23:57.000000000 +0100
@@ -53,7 +53,6 @@
 {
     int	ret;
     
-    if (!(ret = vesaProcessArgument (argc, argv, i)))
 	ret = KdProcessArgument(argc, argv, i);
     return ret;
 }
